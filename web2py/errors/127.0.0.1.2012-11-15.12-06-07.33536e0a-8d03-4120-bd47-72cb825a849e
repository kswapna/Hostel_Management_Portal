(dp1
S'output'
p2
S"<type 'exceptions.RuntimeError'> Cannot compare complaint.Date >= None"
p3
sS'layer'
p4
S'/home/bhanu/web2py/applications/sss/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n### required - do no delete\n\nresponse.title="IIIT-H Hostel Management Portal"\n\nfrom gluon.sqlhtml import form_factory\nimport socket\nimport re\nsession.pdf1=0\nsession.place=\'All\'\n\nCAS.login_url=\'https://login.iiit.ac.in/cas/login\'\nCAS.check_url=\'https://login.iiit.ac.in/cas/validate\'\nCAS.logout_url=\'https://login.iiit.ac.in/cas/logout\'\nCAS.my_url=\'http://127.0.0.1:8000/sss/default/login\'\n\n#if not session.token and not request.function==\'login\':\n #  redirect(URL(r=request, f=\'login\'))\n#session.name="aaa"\nsession.token="chaluvadibhanu.dev@students.iiit.ac.in"\nsession.login = 1 \n\n\ndef login():\n    session.login = 1 \n    session.token = CAS.login(request)\n    name=db(db.students.email==str(session.token)).select(db.students.ALL);\n    session.name=name[0].name\n    session.roll_no=name[0].roll_no\n    session.email = session.token.split(\'@\')[0]\n    redirect(URL(r=request, f=\'index\'))\n    return dict()\n    \ndef logout():\n    session.token=None\n    session.name=""\n    CAS.logout()\n\n\ndef user(): return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call(): return service()\n### end requires\n#@auth.requires_login()\n\ndef poll():\n    return dict()\n#@auth.requires_login()\ndef sr():\n    l=len(request.args)\n    db.poll.insert(question=request.args(0),options_no=l-1,posted_by=session.name)\n    q=db(db.poll.question==request.args(0)).select(db.poll.ALL)\n    pid=q[0].id\n    i=1\n    while i<l :\n        db.options.insert(option=request.args(i),qid=pid)\n        i=i+1\n\n     \n    if session.login==2:\n        db(db.poll.id==pid).update(flag=1)    \n        session.flash="New Poll Created"\n    else:\n        db(db.poll.id==pid).update(flag=0)    \n        session.flash="Your request has been sent"\n    #redirect(URL(r=request,f=\'index\'))\n    return dict(a=request.args,l=l)\n\n#@auth.requires_login()\n\ndef searchbyroll():\n    roll=request.vars.typed\n    print roll\n    query=(db.students.roll_no.startswith(roll))\n    set=db(query)\n    result=set.select()\n    return dict(result=result)\n\ndef medreq():\n    form=SQLFORM(db.medical)\n    now = time.localtime(time.time())\n    year, month, day, hour, minute, second, weekday, yearday, daylight = now\n    db.medical.posted_by.default=session.name\n    db.medical.Date.default=datetime.datetime.today()\n    db.medical.Time.default="%02d:%02d:%02d" % (hour, minute, second)\n    db.medical.Flag.default=1\n    name=db(db.students.email==str(session.token)).select(db.students.ALL);\n    mobile=name[0].mobile\n    form.vars.mobile=mobile\n   \n    if form.accepts(request.vars,session):\n          session.flash="Request recorded"\n          redirect(URL(r=request,f=\'byroll\'))\n    \n    return dict(form=form)\n\n\ndef amedreq():\n\n    form=SQLFORM(db.medical)\n    now = time.localtime(time.time())\n    year, month, day, hour, minute, second, weekday, yearday, daylight = now\n    db.medical.posted_by.default=session.name\n    db.medical.Date.default=datetime.datetime.today()\n    db.medical.Time.default="%02d:%02d:%02d" % (hour, minute, second)\n    db.medical.Flag.default=1\n    name=db(db.students.email==str(session.token)).select(db.students.ALL);\n    mobile=name[0].mobile\n    form.vars.mobile=mobile\n    \n    doctor=db().select(db.docs.ALL)\n  \n    \n    if form.accepts(request.vars,session):\n          session.flash="Request recorded"\n          #redirect(URL(r=request,f=\'index\'))\n    form1=SQLFORM(db.docs)\n    if form1.accepts(request.vars,session):\n          session.flash="Request recorded"\n          redirect(URL(r=request,f=\'amedreq\'))\n    return dict(form=form,form1=form1,doctor=doctor)\n\n\n\n\ndef vmedical():\n    return dict(form=db(db.medical.Flag==1).select(db.medical.ALL,orderby=db.medical.Doctor|~ db.medical.id))\n\ndef searchbyroom():\n    room=request.vars.typed\n    hostel=request.vars.cars\n    print hostel\n    query=(db.students.room_no==room)\n    set=db(query)\n    result=set.select()\n    return dict(result=result)\n\ndef searchbyname():\n    name=request.vars.typed.lower()\n    query=db.students.name.lower().startswith(name)\n    set=db(query)\n    result=set.select()\n    return dict(result=result)\n\ndef markcom():\n     if type(request.vars.option)==str:\n         l=1\n         db(db.complaint.id==request.vars.option).update(Flag=0) \n         \n     else:\n         l=len(request.vars.option)\n         for i in range(l):\n             db(db.complaint.id==request.vars.option[i]).update(Flag=0) \n     redirect(URL(r=request,f=\'vcomplaint\'))\n     return dict(form=l)\n\ndef markcom_med():\n     if type(request.vars.option)==str:\n         l=1\n         db(db.medical.id==request.vars.option).update(Flag=0) \n         \n     else:\n         l=len(request.vars.option)\n         for i in range(l):\n             db(db.medical.id==request.vars.option[i]).update(Flag=0) \n     redirect(URL(r=request,f=\'vmedical\'))\n     return dict(form=l)\n\n\ndef index():\n  session.flash=response.flash\n  if session.login==0:\n        session.login = 1\n        redirect(URL(r=request, f=\'student\'))\n\n        if db(db.puser.email==session.token).select(db.puser.ALL) :\n                session.login = 2\n                redirect(URL(r=request, f=\'puser\'))\n  \n        if db(db.admin.email==session.token).select(db.admin.ALL) :\n                session.login = 4\n                redirect(URL(r=request, f=\'admin\'))\n\n                      \n        if db(db.staff.email==session.token).select(db.staff.ALL) :\n                session.login = 3\n                redirect(URL(r=request, f=\'staff\'))\n\n        else: \n                session.login = 1\n                redirect(URL(r=request, f=\'student\'))\n  else:\n         if session.login==1:\n                redirect(URL(r=request, f=\'student\'))\n                \n         if session.login==2:\n                redirect(URL(r=request, f=\'puser\'))\n                \n         if session.login==3:\n                redirect(URL(r=request, f=\'staff\'))\n                \n         if session.login==4:\n                redirect(URL(r=request, f=\'admin\'))                                                 \n\n\n \ndef requests():\n    poll=db(db.poll.flag==0).select(db.poll.ALL)\n    newsfeed=db(db.news_feed.flag==0).select(db.news_feed.ALL)\n   # query=((db.poll.flag==0))\n    #query2=((db.news_feed.flag==0))\n    #newsfeed=SQLFORM.smartgrid(newsfeed=newsfeed)\n    #form1=SQLFORM.grid(query=query)\n    \n    #form2=SQLFORM.grid(query=query2)\n    if not (poll or  newsfeed):\n        session.flash="All requests processed"\n        redirect(URL(r=request,f=\'index\'))\n    return dict(form1=poll,form2=newsfeed)\n    \ndef request_poll():\n    i=request.args\n    if i[1]=="1":\n        db(db.poll.id==i[0]).update(flag=1)\n    if i[1]=="-1":\n        db(db.poll.id==i[0]).delete()\n        db(db.options.qid==i[0]).delete()\n    redirect(URL(r=request,f=\'requests\'))\n    return dict()\n\ndef request_newsfeed():\n    i=request.args\n    if i[1]=="1":\n        db(db.news_feed.id==i[0]).update(flag=1)\n    if i[1]=="-1":\n        db(db.news_feed.id==i[0]).delete()\n    redirect(URL(r=request,f=\'requests\'))\n    return dict()    \n\n\n\ndef add_news_feed():\n    form=SQLFORM(db.news_feed);\n    form.vars.posted_by=session.name\n    \n    if session.login==2:\n            form.vars.flag=1\n    else:\n            form.vars.flag=0\n            \n    if form.accepts(request.vars,session):\n        if session.login==2:\n            session.flash="Newsfeed Added"\n\n        else:\n            session.flash="Your request has been sent"\n\n        redirect(URL(r=request,f=\'index\'))\n    return dict(form=form)\n      \n\ndef student():\n    variable=0\n    if request.vars.option!=None:\n        k=request.vars.option\n        l=db(db.options.id==k).select(db.options.ALL)\n        \n        la=l[0].qid\n        l=l[0].counter\n        db(db.options.id==k).update(counter=l+1)\n        l2=db(db.poll.id==la).select(db.poll.ALL)\n        l2=l2[0].counter\n        db(db.poll.id==la).update(counter=l2+1)\n        db.vote.insert(qid=la,voted_by=session.name)\n        redirect(URL(r=request,f=\'index\'))\n    if len(request.args) > 0:\n        variable=1\n    newsfeed=db().select(db.news_feed.ALL,orderby=~db.news_feed.id)\n    polls=db().select(db.poll.ALL,orderby=~db.poll.id)\n    \n    form=SQLFORM(db.news_feed);\n    form.vars.posted_by=session.name\n    \n    if session.login==2:\n            form.vars.flag=1\n    else:\n            form.vars.flag=0\n            \n    if form.accepts(request.vars,session):\n        if session.login==2:\n            session.flash="Newsfeed Added"\n\n        else:\n            session.flash="Your request has been sent"\n\n        redirect(URL(r=request,f=\'index\'))    \n    return dict(newsfeed=newsfeed,polls=polls,form=form,variable=variable)\n   \ndef staff():\n    form2=SQLFORM(db.other_laptop_out)\n    if form2.accepts(request.vars,session):\n        session.flash="Laptop Details Entered"\n        redirect(URL(r=request,f=\'staff\'))\n    form=SQLFORM(db.laptop_out)\n    if form.accepts(request.vars,session):\n        session.flash="Laptop Details Entered"\n        redirect(URL(r=request,f=\'show_laptop_details\',args=form.vars.roll_no))\n    return dict(form=form,form2=form2)\n   \n \ndef one(): \n    return dict()\n\ndef puser():\n    if request.vars.option!=None:\n        k=request.vars.option\n        l=db(db.options.id==k).select(db.options.ALL)\n        \n        la=l[0].qid\n        l=l[0].counter\n        db(db.options.id==k).update(counter=l+1)\n        l2=db(db.poll.id==la).select(db.poll.ALL)\n        l2=l2[0].counter\n        db(db.poll.id==la).update(counter=l2+1)\n        db.vote.insert(qid=la,voted_by=session.name)\n        redirect(URL(r=request,f=\'index\'))\n\n    newsfeed=db().select(db.news_feed.ALL,orderby=~db.news_feed.id)\n    polls=db().select(db.poll.ALL,orderby=~db.poll.id)\n    return dict(newsfeed=newsfeed,polls=polls)\n\ndef vacant_rooms():\n    #request.vars=None\n    if request.vars.hostel!=None:\n        k=request.vars.hostel\n        l=request.vars.room_no\n        db.vacant_rooms.insert(hostel=k,room_no=l)\n        redirect(URL(r=request,f=\'vacant_rooms\'))\n    form=db().select(db.vacant_rooms.ALL)\n    return dict(form=form)\n\ndef delete_vacant_rooms():\n    db(db.vacant_rooms.id==request.args[0]).delete()\n    redirect(URL(r=request,f=\'vacant_rooms\'))\n\ndef view_vacant_rooms():\n    return dict()\n\ndef admin():\n    return dict()   \n         \ndef error():\n    return dict()\n    \nimport datetime\nimport time\ndef enter_laptop_details():\n    form=""\n    if request.vars.roll!=None:\n        form=db(db.laptop.roll_no==request.vars.roll).select()\n       # redirect(URL(r=request,f=\'index\'))\n    return dict(form=form,roll=request.vars.roll)\n \ndef delete_laptop():\n    db(db.laptop.id==request.args[0]).delete()\n    redirect(URL(r=request,f=\'enter_laptop_details\'+\'?roll=\'+request.args[1]))\n \ndef add_laptop():\n    db.laptop.insert(roll_no=request.vars.roll,service_tag=request.vars.service_tag,company=request.vars.company)            \n    redirect(URL(r=request,f=\'enter_laptop_details\'+\'?roll=\'+request.vars.roll))        \n          \ndef laptop_out_details():\n    form=SQLFORM(db.laptop_out)\n    if form.accepts(request.vars,session):\n        session.flash="Laptop Details Entered"\n        redirect(URL(r=request,f=\'show_laptop_details\',args=form.vars.roll_no))\n    return dict(form=form)\n    \ndef view_laptop_out_details():\n    if request.vars.number!=None:\n        n=request.vars.number\n    else:\n        n=25\n    return dict(form=db().select(db.laptop_out.ALL,limitby=(0,int(n))),number=n)\n\ndef view_student_out_details():\n    if request.vars.number!=None:\n        n=request.vars.number\n    else:\n        n=25\n    return dict(form=db().select(db.student_out.ALL,limitby=(0,int(n))),number=n)\n\ndef student_out_details():\n    form=SQLFORM(db.student_out)\n    if form.accepts(request.vars,session):\n        session.flash="student Details Entered"\n        if form.vars.laptop_presence=="present":\n            db.laptop_out.insert(roll_no=form.vars.roll_no,reason="outside campus")\n            redirect(URL(r=request,f=\'show_laptop_details\',args=form.vars.roll_no))\n        else:\n            redirect(URL(r=request,f=\'index\'))\n    return dict(form=form)\n\ndef show_laptop_details():\n    i=request.args\n    \n    laptop=db(db.laptop.roll_no==i[0]).select(db.laptop.ALL)\n    if not laptop:\n        session.flash="No Record Found Enter Details"\n        redirect(URL(r=request,f= enter_laptop_details))\n    name=db(db.students.roll_no==i[0]).select(db.students.name)\n    \n    return dict(form=laptop,roll=i[0])\n    \ndef regcomplaint():\n    now = time.localtime(time.time())\n    year, month, day, hour, minute, second, weekday, yearday, daylight = now\n    db.complaint.User.default=session.name\n    db.complaint.Date.default=datetime.datetime.today()\n    db.complaint.Time.default="%02d:%02d:%02d" % (hour, minute, second)\n    db.complaint.Flag.default=1\n    form = SQLFORM(db.complaint)\n    w=0\n    if form.process().accepted:\n        session.flash = \'your complaint is registered\'\n        redirect(URL(r=request,f=\'complaint\'))\n    else:\n        w=1  \n    if not request.vars.place:\n        query=(db.complaint.User==session.name)\n        set=db(query)\n        complaints=set.select(orderby=~db.complaint.Flag|~ db.complaint.Date|~db.complaint.Time ,limitby=(0,5))\n        filtered_by="All"\n    else:\n        if(request.vars.place=="All"):\n            query=(db.complaint.User==session.name)\n        else:\n            query=(db.complaint.User==session.name)&(db.complaint.category==request.vars.place) \n        set=db(query)\n        complaints=set.select(orderby=~db.complaint.Flag|~ db.complaint.Date|~db.complaint.Time,limitby=(0,5))\n        filtered_by=request.vars.place\n     \n    if not request.vars.place2:\n        query=(db.complaint.access!="Private") & (db.complaint.Flag!=0)\n        set=db(query)\n        complaints2=set.select(orderby=~ db.complaint.Date|~db.complaint.Time)\n        filtered_by2="All"\n    else:\n        if(request.vars.place2=="All"):\n            query=(db.complaint.access!="Private") & (db.complaint.Flag!=0)\n        else:\n            query=(db.complaint.access!="Private")&(db.complaint.category==request.vars.place2) & (db.complaint.Flag!=0)\n        set=db(query)\n        complaints2=set.select(orderby=~ db.complaint.Date|~db.complaint.Time)\n        filtered_by2=request.vars.place2\n    return dict(w=w,complaints=complaints,complaints2=complaints2,filtered_by=filtered_by,filtered_by2=filtered_by2,form=form)    \n \n#@auth.requires_login()\ndef complaint():\n    if not request.vars.place:\n        query=(db.complaint.User==session.name)\n        set=db(query)\n        complaints=set.select(orderby=~db.complaint.Flag|~ db.complaint.Date|~db.complaint.Time ,limitby=(0,5))\n        filtered_by="All"\n    else:\n        if(request.vars.place=="All"):\n            query=(db.complaint.User==session.name)\n        else:\n            query=(db.complaint.User==session.name)&(db.complaint.category==request.vars.place) \n        set=db(query)\n        complaints=set.select(orderby=~db.complaint.Flag|~ db.complaint.Date|~db.complaint.Time,limitby=(0,5))\n        filtered_by=request.vars.place\n     \n    if not request.vars.place2:\n        query=(db.complaint.access!="Private") & (db.complaint.Flag!=0)\n        set=db(query)\n        complaints2=set.select(orderby=~ db.complaint.Date|~db.complaint.Time)\n        filtered_by2="All"\n    else:\n        if(request.vars.place2=="All"):\n            query=(db.complaint.access!="Private") & (db.complaint.Flag!=0)\n        else:\n            query=(db.complaint.access!="Private")&(db.complaint.category==request.vars.place2) & (db.complaint.Flag!=0)\n        set=db(query)\n        complaints2=set.select(orderby=~ db.complaint.Date|~db.complaint.Time)\n        filtered_by2=request.vars.place2\n    return dict(complaints=complaints,complaints2=complaints2,filtered_by=filtered_by,filtered_by2=filtered_by2)\n     \n     \ndef showcomplaint():\n    return dict()\ndef viewprivate():\n    if(request.args(0)==\'1\'):\n        query=(db.complaint.User==session.name) & (db.complaint.Flag==1)\n        set=db(query)\n        complaints=set.select()\n        return dict(complaints=complaints)\n    else:\n        if(request.vars.place==\'1\'):\n            query=(db.complaint.User==session.name) & (db.complaint.Flag==1)\n        else:\n            query=(db.complaint.User==session.name)&(db.complaint.category==request.vars.place) & (db.complaint.Flag==1)\n        set=db(query)\n        complaints=set.select()\n        return dict(complaints=complaints)\ndef delcomplaint():\n    remove = db(db.complaint.id==request.args(0)).delete()\n    if remove:\n        response.flash=\'complaint deleted succesfully\'\n        redirect(URL(\'viewprivate\'))\n    else:\n        response.flash=\'image deletion failed\'\ndef viewpublic():\n    query=(db.complaint.access!="Private") & (db.complaint.Flag!=0)\n    set=db(query)\n    complaints=set.select()\n    return dict(complaints=complaints)\ndef metcomplaint():\n    db(db.complaint.id==request.args(0)).update(Flag=0)\n    response.flash=\'Removed the complaint succesfully\'\n    redirect(URL(\'viewprivate\'))\ndef search():\n    return dict()\ndef byname():\n    return dict()\ndef byroll():\n#here complaints means students list result\n    complaints=""\n    if request.vars.blood_grp!=None:\n        if request.vars.roll_no!=None:\n            query= ( db.students.roll_no.startswith(request.vars.roll_no) ) & (db.students.blood_grp==request.vars.blood_grp)\n            set=db(query)\n            complaints=set.select()\n        else:\n            complaints=db(db.students.blood_grp==response.vars.blood_grp).select()\n            \n    return dict(result=complaints,grp=request.vars.blood_grp,roll=request.vars.roll_no)\n            \n    return dict()\ndef byroom():\n    return dict()\n\n\ndef viewprofile():\n    query=(db.students.roll_no==request.args(0))\n    set=db(query)\n    prof=set.select()\n    return dict(prof=prof)\n\ndef editprofile():\n    query=(db.students.roll_no==request.args(0))\n    set=db(query)\n    prof=set.select()\n    studentid=prof[0].id\n    form=SQLFORM(db.students,studentid)\n    if form.accepts(request.vars,session):\n          session.flash="Profile edited"\n          redirect(URL(r=request,f=\'index\'))\n    return dict(form=form)\n\ndef vcomplaint():\n    m=""\n    n=""\n    \n    if(session.pdf1==0):\n        session.place=request.vars.place\n    if(session.place==None):\n        complaints = db().select(db.complaint.ALL,orderby=~db.complaint.Date|~db.complaint.Time)\n        filtered_by="All"\n    else:\n         if request.vars.end!=None:\n              m= request.vars.end \n         if request.vars.start!=None:\n              n=request.vars.start\n         if(session.place==\'1\'):\n           \n            if(m==\'\'):\n                m=datetime.datetime.today()\n            n=request.vars.start\n            if(n==\'\'):\n               today = datetime.datetime.today()\n               DD = datetime.timedelta(days=90)\n               n=today - DD\n            query=(db.complaint.Date>=n)&(db.complaint.Date<=m)\n            set=db(query)\n            complaints=set.select(orderby=~db.complaint.Date|~db.complaint.Time)\n            filtered_by="All"\n         else:\n     \n            if(m==\'\'):\n                m=datetime.datetime.today()\n            n=request.vars.start\n            if(n==\'\'):\n               today = datetime.datetime.today()\n               DD = datetime.timedelta(days=90)\n               n=today - DD\n            query=(db.complaint.category==session.place)& (db.complaint.Date>=n)&(db.complaint.Date<=m)\n            set=db(query)\n            complaints=set.select(orderby=~db.complaint.Date|~db.complaint.Time)\n            filtered_by=session.place\n            \n    if session.pdf1==1 :\n        o=[]\n        for row in complaints:\n            o=o+[row.access]\n            o=o+[row.category]\n            o=o+[row.AvailableTime]\n            o=o+[row.complaint_body]\n            print 1\n            print o\n        return o\n    else:\n        return dict(complaints=complaints,filtered_by=filtered_by,start=request.vars.start,end=request.vars.end)    \n\n    \ndef staff_vcomplaint():\n    if(session.pdf1==0):\n        session.place=request.vars.place\n    if(session.place==None):\n        complaints = db(db.complaint.Flag==1).select(db.complaint.ALL,orderby=~ db.complaint.Date|~db.complaint.Time)\n        filtered_by="All"\n    else:\n         if(session.place==\'ALL\'):\n           complaints = db(db.complaint.Flag==1).select(db.complaint.ALL,orderby=~ db.complaint.Date|~db.complaint.Time)\n           filtered_by="ALL"\n         else:\n            query=(db.complaint.category==request.vars.place)& (db.complaint.Flag==1)\n\n            set=db(query)\n            complaints=set.select(orderby=~db.complaint.Date|~db.complaint.Time)\n            filtered_by=session.place\n    o=[]\n    print session.pdf1\n    if session.pdf1==1 :\n        for row in complaints:\n            o=o+[row.access]\n            o=o+[row.category]\n            o=o+[row.AvailableTime]\n            o=o+[row.complaint_body]\n            print 1\n            print o\n        return o\n    else:\n            return dict(complaints=complaints,filtered_by=filtered_by)\n            \n                \n                        \ndef month_input():\n    return dict()\n\ndef month_selector():\n    if not request.vars.name:\n        return \'\'\n    pattern = request.vars.name.capitalize() + \'%\'\n    selected = [row.name for row in db(db.students.name.like(pattern)).select()]\n    return \'\'.join([DIV(k,\n                 _onclick="jQuery(\'#name\').val(\'%s\')" % k,\n                 _onmouseover="this.style.backgroundColor=\'yellow\'",\n                 _onmouseout="this.style.backgroundColor=\'white\'"\n                 ).xml() for k in selected])\n\n\n\ndef rules():\n    rules=db().select(db.rules.ALL)\n    form = SQLFORM(db.rules)\n    if form.process().accepted:\n        session.flash = \'New rule added\'\n        redirect(URL(r=request,f=\'rules\'))\n    else:\n        w=1  \n    return dict(rules=rules,form=form)\n    \ndef delrule():\n    remove = db(db.rules.id==request.args(0)).delete()\n    if remove:\n        session.flash=\'rule deleted succesfully\'\n        redirect(URL(\'rules\'))\n    else:\n        session.flash=\'rule deletion failed\'\n\ndef uprule():\n    m=request.args(0)\n    for k in db(db.rules.id==m).select():\n        db.rules.rule.default=k.rule\n    form = SQLFORM(db.rules)\n    if form.process().accepted:\n        response.flash = \'Rule Updated\'\n        db(db.rules.id==request.args(0)).delete()\n        redirect(URL(r=request,f=\'rules\'))   \n    return dict(form=form)\n    \n\n   \ndef deldoc():\n    remove = db(db.docs.id==request.args(0)).delete()\n    if remove:\n        session.flash=\'Entry deleted succesfully\'\n        redirect(URL(\'amedreq\'))\n    else:\n        session.flash=\'entry deletion failed\'\n\ndef updoc():\n    m=request.args(0)\n    for k in db(db.docs.id==m).select():\n        db.docs.Doctor_Name.default=k.Doctor_Name\n        db.docs.Phone_No.default=k.Phone_No\n        db.docs.Available_day_and_time.default=k.Available_day_and_time\n    form = SQLFORM(db.docs)\n    if form.process().accepted:\n        response.flash = \'Entry Updated\'\n        db(db.docs.id==request.args(0)).delete()\n        redirect(URL(r=request,f=\'amedreq\'))   \n    return dict(form=form)\n\n\ndef studentrules():\n    rules=db().select(db.rules.ALL)\n    return dict(rules=rules)\n    \n    \n    \ndef promote():\n        if request.vars:\n            m=request.vars.id\n            f=request.vars.fro\n            t=request.vars.to\n            if(db(db[request.vars.fro].email==m).delete()):\n                if(t=="admin"):\n                    db.admin.insert(email=m)\n                if(t=="puser"):\n                    db.puser.insert(email=m)\n                if(t=="staff"):\n                    db.staff.insert(email=m)\n                if(t=="user"):\n                    db.nuser.insert(email=m)\n                session.flash="Promotion successfull"\n            else:\n                session.flash="Invalid Promotion"\n            redirect(URL(\'promote\'))\n        return dict()\n\n\n\ndef listing():\n    response.title = "Complaints"\n    l=request.vars.function\n    session.pdf1=1\n    session.place=request.vars.place\n    print session.pdf1\n    o=eval(l)()\n    session.place=None\n    session.pdf1=0\n    print o\n    # define header and footers:\n    head = THEAD(TR(TH("User",_width="10%"), \n                    TH("Category",_width="10%"),\n                    TH("Time",_width="10%"),\n                    TH("Complaint",_width="70%"), \n                    _bgcolor="#A0A0A0"))\n    foot = TFOOT(TR(TH("Footer 1",_width="10%"), \n                    TH("Footer 2",_width="10%"),\n                    TH("Footer 4",_width="10%"),\n                    TH("Footer 3",_width="70%"),\n                    _bgcolor="#E0E0E0"))\n    \n    # create several rows:\n    rows = []\n    i=-4\n    k=len(o)/4\n    \n    for i1 in range(k):\n        print "poi"\n        i=i+4\n        col = i % 4 and "#F0F0F0" or "#FFFFFF"\n        rows.append(TR(TD(o[i],_align="center"),\n                           TD(o[i+1] ,_align="center"),\n                            TD(o[i+2] ,_align="center"),\n                       TD(o[i+3], _align="center"),\n                       _bgcolor=col)) \n\n    # make the table object\n    body = TBODY(*rows)\n    table = TABLE(*[head,foot, body], \n                  _border="1", _align="center", _width="100%")\n\n    if request.extension=="pdf":\n        from gluon.contrib.pyfpdf import FPDF, HTMLMixin\n\n        # define our FPDF class (move to modules if it is reused  frequently)\n        class MyFPDF(FPDF, HTMLMixin):\n            def header(self):\n                self.set_font(\'Arial\',\'B\',15)\n                self.cell(0,10, response.title ,1,0,\'C\')\n                self.ln(20)\n                \n            def footer(self):\n                self.set_y(-15)\n                self.set_font(\'Arial\',\'I\',8)\n                txt = \'Page %s of %s\' % (self.page_no(), self.alias_nb_pages())\n                self.cell(0,10,txt,0,0,\'C\')\n                    \n        pdf=MyFPDF()\n        pdf.add_page()\n        pdf.write_html(str(XML(table, sanitize=True)))\n        response.headers[\'Content-Type\']=\'application/pdf\'\n        return pdf.output(dest=\'S\')\n    else:\n        return dict(table=table)\n\nresponse._vars=response._caller(listing)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/bhanu/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/bhanu/web2py/applications/sss/controllers/default.py", line 811, in <module>\n  File "/home/bhanu/web2py/gluon/globals.py", line 188, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/bhanu/web2py/applications/sss/controllers/default.py", line 751, in listing\n    o=eval(l)()\n  File "/home/bhanu/web2py/applications/sss/controllers/default.py", line 599, in vcomplaint\n    complaints=set.select(orderby=~db.complaint.Date|~db.complaint.Time)\n  File "/home/bhanu/web2py/gluon/dal.py", line 8788, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/bhanu/web2py/gluon/dal.py", line 2128, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/bhanu/web2py/gluon/dal.py", line 1603, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/bhanu/web2py/gluon/dal.py", line 1463, in _select\n    sql_w = \' WHERE \' + self.expand(query)\n  File "/home/bhanu/web2py/gluon/dal.py", line 1296, in expand\n    return op(first, second)\n  File "/home/bhanu/web2py/gluon/dal.py", line 1179, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/bhanu/web2py/gluon/dal.py", line 1296, in expand\n    return op(first, second)\n  File "/home/bhanu/web2py/gluon/dal.py", line 1179, in AND\n    return \'(%s AND %s)\' % (self.expand(first), self.expand(second))\n  File "/home/bhanu/web2py/gluon/dal.py", line 1298, in expand\n    return op(first)\n  File "/home/bhanu/web2py/gluon/dal.py", line 1252, in GE\n    raise RuntimeError, "Cannot compare %s >= None" % first\nRuntimeError: Cannot compare complaint.Date >= None\n'
p11
s.