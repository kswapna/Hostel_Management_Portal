(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> STARTSWITH() takes exactly 3 arguments (2 given)"
p3
sS'layer'
p4
S'/home/bhanu/web2py/applications/sss/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n### required - do no delete\n\nresponse.title="IIIT-H Hostel Management Portal"\n\nfrom gluon.sqlhtml import form_factory\nimport socket\nimport re\n\nCAS.login_url=\'https://login.iiit.ac.in/cas/login\'\nCAS.check_url=\'https://login.iiit.ac.in/cas/validate\'\nCAS.logout_url=\'https://login.iiit.ac.in/cas/logout\'\nCAS.my_url=\'http://127.0.0.1:8000/sss/default/login\'\n\n#if not session.token and not request.function==\'login\':\n#   redirect(URL(r=request, f=\'login\'))\nsession.name="aaa"\nsession.token="chaluvadibhanu.dev@students.iiit.ac.in"\n\ndef login():\n    session.login = 0 \n    session.token = CAS.login(request)\n    name=db(db.students.email==str(session.token)).select(db.students.ALL);\n    session.name=name[0].name\n    session.roll_no=name[0].roll_no\n    session.email = session.token.split(\'@\')[0]\n    redirect(URL(r=request, f=\'index\'))\n    return dict()\n    \ndef logout():\n    session.token=None\n    session.name=""\n    CAS.logout()\n\n\ndef user(): return dict(form=auth())\ndef download(): return response.download(request,db)\ndef call(): return service()\n### end requires\n#@auth.requires_login()\n\ndef poll():\n    return dict()\n#@auth.requires_login()\ndef sr():\n    l=len(request.args)\n    db.poll.insert(question=request.args(0),options_no=l-1,posted_by=session.name)\n    q=db(db.poll.question==request.args(0)).select(db.poll.ALL)\n    pid=q[0].id\n    i=1\n    while i<l :\n        db.options.insert(option=request.args(i),qid=pid)\n        i=i+1\n\n     \n    if session.login==2:\n        db(db.poll.id==pid).update(flag=1)    \n        session.flash="New Poll Created"\n    else:\n        db(db.poll.id==pid).update(flag=0)    \n        session.flash="Your request has been sent"\n    #redirect(URL(r=request,f=\'index\'))\n    return dict(a=request.args,l=l)\n\n#@auth.requires_login()\n\ndef searchbyroll():\n    roll=request.vars.typed\n    print roll\n    query=(db.students.roll_no.startswith(roll))\n    set=db(query)\n    result=set.select()\n    return dict(result=result)\n\ndef medreq():\n    form=SQLFORM(db.medical)\n    now = time.localtime(time.time())\n    year, month, day, hour, minute, second, weekday, yearday, daylight = now\n    db.medical.posted_by.default=session.name\n    db.medical.Date.default=datetime.datetime.today()\n    db.medical.Time.default="%02d:%02d:%02d" % (hour, minute, second)\n    db.medical.Flag.default=1\n    name=db(db.students.email==str(session.token)).select(db.students.ALL);\n    mobile=name[0].mobile\n    form.vars.mobile=mobile\n   \n    if form.accepts(request.vars,session):\n          session.flash="Request recorded"\n          #redirect(URL(r=request,f=\'index\'))\n    \n    return dict(form=form)\n\ndef vmedical():\n    return dict(form=db(db.medical.Flag==1).select(db.medical.ALL,orderby=db.medical.Doctor|~ db.medical.id))\n\ndef searchbyroom():\n    room=request.vars.typed\n    hostel=request.vars.cars\n    print hostel\n    query=(db.students.room_no==room)\n    set=db(query)\n    result=set.select()\n    return dict(result=result)\n\ndef searchbyname():\n    name=request.vars.typed.lower()\n    query=db.students.name.lower().startswith(name)\n    set=db(query)\n    result=set.select()\n    return dict(result=result)\n\ndef markcom():\n     if type(request.vars.option)==str:\n         l=1\n         db(db.complaint.id==request.vars.option).update(Flag=0) \n         \n     else:\n         l=len(request.vars.option)\n         for i in range(l):\n             db(db.complaint.id==request.vars.option[i]).update(Flag=0) \n     redirect(URL(r=request,f=\'vcomplaint\'))\n     return dict(form=l)\n\ndef markcom_med():\n     if type(request.vars.option)==str:\n         l=1\n         db(db.medical.id==request.vars.option).update(Flag=0) \n         \n     else:\n         l=len(request.vars.option)\n         for i in range(l):\n             db(db.medical.id==request.vars.option[i]).update(Flag=0) \n     redirect(URL(r=request,f=\'vmedical\'))\n     return dict(form=l)\n\n\ndef index():\n  session.flash=response.flash\n  if session.login==0:\n        session.login = 1\n        redirect(URL(r=request, f=\'student\'))\n\n        if db(db.puser.email==session.token).select(db.puser.ALL) :\n                session.login = 2\n                redirect(URL(r=request, f=\'puser\'))\n  \n        if db(db.admin.email==session.token).select(db.admin.ALL) :\n                session.login = 4\n                redirect(URL(r=request, f=\'admin\'))\n\n                      \n        if db(db.staff.email==session.token).select(db.staff.ALL) :\n                session.login = 3\n                redirect(URL(r=request, f=\'staff\'))\n\n        else: \n                session.login = 1\n                redirect(URL(r=request, f=\'student\'))\n  else:\n         if session.login==1:\n                redirect(URL(r=request, f=\'student\'))\n                \n         if session.login==2:\n                redirect(URL(r=request, f=\'puser\'))\n                \n         if session.login==3:\n                redirect(URL(r=request, f=\'staff\'))\n                \n         if session.login==4:\n                redirect(URL(r=request, f=\'admin\'))                                                 \n\n\n \ndef requests():\n    poll=db(db.poll.flag==0).select(db.poll.ALL)\n    newsfeed=db(db.news_feed.flag==0).select(db.news_feed.ALL)\n   # query=((db.poll.flag==0))\n    #query2=((db.news_feed.flag==0))\n    #newsfeed=SQLFORM.smartgrid(newsfeed=newsfeed)\n    #form1=SQLFORM.grid(query=query)\n    \n    #form2=SQLFORM.grid(query=query2)\n    if not (poll or  newsfeed):\n        session.flash="All requests processed"\n        redirect(URL(r=request,f=\'index\'))\n    return dict(form1=poll,form2=newsfeed)\n    \ndef request_poll():\n    i=request.args\n    if i[1]=="1":\n        db(db.poll.id==i[0]).update(flag=1)\n    if i[1]=="-1":\n        db(db.poll.id==i[0]).delete()\n        db(db.options.qid==i[0]).delete()\n    redirect(URL(r=request,f=\'requests\'))\n    return dict()\n\ndef request_newsfeed():\n    i=request.args\n    if i[1]=="1":\n        db(db.news_feed.id==i[0]).update(flag=1)\n    if i[1]=="-1":\n        db(db.news_feed.id==i[0]).delete()\n    redirect(URL(r=request,f=\'requests\'))\n    return dict()    \n\n\n\ndef add_news_feed():\n    form=SQLFORM(db.news_feed);\n    form.vars.posted_by=session.name\n    \n    if session.login==2:\n            form.vars.flag=1\n    else:\n            form.vars.flag=0\n            \n    if form.accepts(request.vars,session):\n        if session.login==2:\n            session.flash="Newsfeed Added"\n\n        else:\n            session.flash="Your request has been sent"\n\n        redirect(URL(r=request,f=\'index\'))\n    return dict(form=form)\n      \n\ndef student():\n    if request.vars.option!=None:\n        k=request.vars.option\n        l=db(db.options.id==k).select(db.options.ALL)\n        \n        la=l[0].qid\n        l=l[0].counter\n        db(db.options.id==k).update(counter=l+1)\n        l2=db(db.poll.id==la).select(db.poll.ALL)\n        l2=l2[0].counter\n        db(db.poll.id==la).update(counter=l2+1)\n        db.vote.insert(qid=la,voted_by=session.name)\n        redirect(URL(r=request,f=\'index\'))\n\n    newsfeed=db().select(db.news_feed.ALL,orderby=~db.news_feed.id)\n    polls=db().select(db.poll.ALL,orderby=~db.poll.id)\n    return dict(newsfeed=newsfeed,polls=polls)\n   \ndef staff():\n    return dict()\n \ndef one(): \n    return dict()\n\ndef puser():\n    if request.vars.option!=None:\n        k=request.vars.option\n        l=db(db.options.id==k).select(db.options.ALL)\n        \n        la=l[0].qid\n        l=l[0].counter\n        db(db.options.id==k).update(counter=l+1)\n        l2=db(db.poll.id==la).select(db.poll.ALL)\n        l2=l2[0].counter\n        db(db.poll.id==la).update(counter=l2+1)\n        db.vote.insert(qid=la,voted_by=session.name)\n        redirect(URL(r=request,f=\'index\'))\n\n    newsfeed=db().select(db.news_feed.ALL,orderby=~db.news_feed.id)\n    polls=db().select(db.poll.ALL,orderby=~db.poll.id)\n    return dict(newsfeed=newsfeed,polls=polls)\n\ndef vacant_rooms():\n    #request.vars=None\n    if request.vars.hostel!=None:\n        k=request.vars.hostel\n        l=request.vars.room_no\n        db.vacant_rooms.insert(hostel=k,room_no=l)\n        redirect(URL(r=request,f=\'vacant_rooms\'))\n    form=db().select(db.vacant_rooms.ALL)\n    return dict(form=form)\n\ndef delete_vacant_rooms():\n    db(db.vacant_rooms.id==request.args[0]).delete()\n    redirect(URL(r=request,f=\'vacant_rooms\'))\n\ndef view_vacant_rooms():\n    return dict()\n\ndef admin():\n    return dict()   \n         \ndef error():\n    return dict()\n    \nimport datetime\nimport time\ndef enter_laptop_details():\n    form=SQLFORM(db.laptop)\n    if form.accepts(request.vars,session):\n        session.flash = T(\'laptop details entered\')\n        redirect(URL(r=request,f=\'index\'))\n\n    return dict(form=form)\ndef laptop_out_details():\n    form=SQLFORM(db.laptop_out)\n    if form.accepts(request.vars,session):\n        session.flash="Laptop Details Entered"\n        redirect(URL(r=request,f=\'show_laptop_details\',args=form.vars.roll_no))\n    return dict(form=form)\ndef student_out_details():\n    form=SQLFORM(db.student_out)\n    if form.accepts(request.vars,session):\n        session.flash="student Details Entered"\n        if form.vars.laptop_presence=="present":\n            db.laptop_out.insert(roll_no=form.vars.roll_no,reason="outside campus")\n            redirect(URL(r=request,f=\'show_laptop_details\',args=form.vars.roll_no))\n        else:\n            redirect(URL(r=request,f=\'index\'))\n    return dict(form=form)\ndef show_laptop_details():\n    i=request.args\n    \n    laptop=db(db.laptop.roll_no==i[0]).select(db.laptop.ALL)\n    if not laptop:\n        session.flash="No Record Found Enter Details"\n        redirect(URL(r=request,f= enter_laptop_details))\n    name=db(db.students.roll_no==i[0]).select(db.students.name)\n    return dict(form=laptop)\n    \ndef regcomplaint():\n    now = time.localtime(time.time())\n    year, month, day, hour, minute, second, weekday, yearday, daylight = now\n    db.complaint.User.default=session.name\n    db.complaint.Date.default=datetime.datetime.today()\n    db.complaint.Time.default="%02d:%02d:%02d" % (hour, minute, second)\n    db.complaint.Flag.default=1\n    form = SQLFORM(db.complaint)\n    w=0\n    if form.process().accepted:\n        session.flash = \'your complaint is registered\'\n        redirect(URL(r=request,f=\'complaint\'))\n    else:\n        w=1  \n    if not request.vars.place:\n        query=(db.complaint.User==session.name)\n        set=db(query)\n        complaints=set.select(orderby=~db.complaint.Flag|~ db.complaint.Date|~db.complaint.Time ,limitby=(0,5))\n        filtered_by="All"\n    else:\n        if(request.vars.place=="All"):\n            query=(db.complaint.User==session.name)\n        else:\n            query=(db.complaint.User==session.name)&(db.complaint.category==request.vars.place) \n        set=db(query)\n        complaints=set.select(orderby=~db.complaint.Flag|~ db.complaint.Date|~db.complaint.Time,limitby=(0,5))\n        filtered_by=request.vars.place\n     \n    if not request.vars.place2:\n        query=(db.complaint.access!="Private") & (db.complaint.Flag!=0)\n        set=db(query)\n        complaints2=set.select(orderby=~ db.complaint.Date|~db.complaint.Time)\n        filtered_by2="All"\n    else:\n        if(request.vars.place2=="All"):\n            query=(db.complaint.access!="Private") & (db.complaint.Flag!=0)\n        else:\n            query=(db.complaint.access!="Private")&(db.complaint.category==request.vars.place2) & (db.complaint.Flag!=0)\n        set=db(query)\n        complaints2=set.select(orderby=~ db.complaint.Date|~db.complaint.Time)\n        filtered_by2=request.vars.place2\n    return dict(w=w,complaints=complaints,complaints2=complaints2,filtered_by=filtered_by,filtered_by2=filtered_by2,form=form)    \n \n#@auth.requires_login()\ndef complaint():\n    if not request.vars.place:\n        query=(db.complaint.User==session.name)\n        set=db(query)\n        complaints=set.select(orderby=~db.complaint.Flag|~ db.complaint.Date|~db.complaint.Time ,limitby=(0,5))\n        filtered_by="All"\n    else:\n        if(request.vars.place=="All"):\n            query=(db.complaint.User==session.name)\n        else:\n            query=(db.complaint.User==session.name)&(db.complaint.category==request.vars.place) \n        set=db(query)\n        complaints=set.select(orderby=~db.complaint.Flag|~ db.complaint.Date|~db.complaint.Time,limitby=(0,5))\n        filtered_by=request.vars.place\n     \n    if not request.vars.place2:\n        query=(db.complaint.access!="Private") & (db.complaint.Flag!=0)\n        set=db(query)\n        complaints2=set.select(orderby=~ db.complaint.Date|~db.complaint.Time)\n        filtered_by2="All"\n    else:\n        if(request.vars.place2=="All"):\n            query=(db.complaint.access!="Private") & (db.complaint.Flag!=0)\n        else:\n            query=(db.complaint.access!="Private")&(db.complaint.category==request.vars.place2) & (db.complaint.Flag!=0)\n        set=db(query)\n        complaints2=set.select(orderby=~ db.complaint.Date|~db.complaint.Time)\n        filtered_by2=request.vars.place2\n    return dict(complaints=complaints,complaints2=complaints2,filtered_by=filtered_by,filtered_by2=filtered_by2)\n     \n     \ndef showcomplaint():\n    return dict()\ndef viewprivate():\n    if(request.args(0)==\'1\'):\n        query=(db.complaint.User==session.name) & (db.complaint.Flag==1)\n        set=db(query)\n        complaints=set.select()\n        return dict(complaints=complaints)\n    else:\n        if(request.vars.place==\'1\'):\n            query=(db.complaint.User==session.name) & (db.complaint.Flag==1)\n        else:\n            query=(db.complaint.User==session.name)&(db.complaint.category==request.vars.place) & (db.complaint.Flag==1)\n        set=db(query)\n        complaints=set.select()\n        return dict(complaints=complaints)\ndef delcomplaint():\n    remove = db(db.complaint.id==request.args(0)).delete()\n    if remove:\n        response.flash=\'complaint deleted succesfully\'\n        redirect(URL(\'viewprivate\'))\n    else:\n        response.flash=\'image deletion failed\'\ndef viewpublic():\n    query=(db.complaint.access!="Private") & (db.complaint.Flag!=0)\n    set=db(query)\n    complaints=set.select()\n    return dict(complaints=complaints)\ndef metcomplaint():\n    db(db.complaint.id==request.args(0)).update(Flag=0)\n    response.flash=\'Removed the complaint succesfully\'\n    redirect(URL(\'viewprivate\'))\ndef search():\n    return dict()\ndef byname():\n    return dict()\ndef byroll():\n#here complaints means students list result\n    complaints=""\n    if request.vars.blood_grp!=None:\n        if request.vars.roll_no!=None:\n            query= ( db.students.roll_no.startswith(request.vars.roll_no) ) & (db.students.blood_grp==request.vars.blood_grp)\n            set=db(query)\n            complaints=set.select()\n        else:\n            complaints=db(db.students.blood_grp==response.vars.blood_grp).select()\n            \n    return dict(result=complaints,grp=request.vars.blood_grp,roll=request.vars.roll_no)\n            \n    return dict()\ndef byroom():\n    return dict()\n\n\ndef viewprofile():\n    query=(db.students.roll_no==request.args(0))\n    set=db(query)\n    prof=set.select()\n    return dict(prof=prof)\n\ndef vcomplaint():\n    if(request.vars.place==None):\n        complaints = db(db.complaint.Flag==1).select(db.complaint.ALL,orderby=~ db.complaint.Date|~db.complaint.Time)\n        filtered_by="All"\n    else:\n         if(request.vars.place==\'1\'):\n           complaints = db(db.complaint.Flag==1).select(db.complaint.ALL,orderby=~ db.complaint.Date|~db.complaint.Time)\n           filtered_by="All"\n         else:\n            query=(db.complaint.category==request.vars.place)& (db.complaint.Flag==1)\n            set=db(query)\n            complaints=set.select(orderby=~db.complaint.Date|~db.complaint.Time)\n            filtered_by=request.vars.place\n    return dict(complaints=complaints,filtered_by=filtered_by)\n    \ndef month_input():\n    return dict()\n\ndef month_selector():\n    if not request.vars.name:\n        return \'\'\n    pattern = request.vars.name.capitalize() + \'%\'\n    selected = [row.name for row in db(db.students.name.like(pattern)).select()]\n    return \'\'.join([DIV(k,\n                 _onclick="jQuery(\'#name\').val(\'%s\')" % k,\n                 _onmouseover="this.style.backgroundColor=\'yellow\'",\n                 _onmouseout="this.style.backgroundColor=\'white\'"\n                 ).xml() for k in selected])\n\nresponse._vars=response._caller(searchbyroll)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/bhanu/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/bhanu/web2py/applications/sss/controllers/default.py", line 493, in <module>\n  File "/home/bhanu/web2py/gluon/globals.py", line 188, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/bhanu/web2py/applications/sss/controllers/default.py", line 72, in searchbyroll\n    result=set.select()\n  File "/home/bhanu/web2py/gluon/dal.py", line 8788, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/bhanu/web2py/gluon/dal.py", line 2128, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/bhanu/web2py/gluon/dal.py", line 1603, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/bhanu/web2py/gluon/dal.py", line 1463, in _select\n    sql_w = \' WHERE \' + self.expand(query)\n  File "/home/bhanu/web2py/gluon/dal.py", line 1298, in expand\n    return op(first)\nTypeError: STARTSWITH() takes exactly 3 arguments (2 given)\n'
p11
s.